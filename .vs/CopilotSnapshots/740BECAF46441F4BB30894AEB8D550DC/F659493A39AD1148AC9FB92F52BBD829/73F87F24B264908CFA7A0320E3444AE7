using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MyProject
{
    public partial class MainForm : Form
    {
        private string currentUserName = "Mock User";
        private string currentUserId = "";
        private FlowLayoutPanel flowProjectsList;

        public MainForm()
        {
            InitializeComponent();
            InitializeUI();
        }

        public MainForm(string userName, string userId) : this()
        {
            currentUserName = userName;
            currentUserId = userId;
            lblWelcome.Text = $"Chào mừng, {userName}";
            lblUserName.Text = GetInitials(userName);
            
            // Load projects from API
            LoadProjectsFromApi();
        }

        private void InitializeUI()
        {
            // Làm tròn góc cho label user avatar
            lblUserName.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(lblUserName.ClientRectangle, 25))
                {
                    lblUserName.Region = new Region(path);
                }
            };

            // Làm tròn góc cho các stat panels
            SetRoundedCorners(panelStat1, 10);
            SetRoundedCorners(panelStat2, 10);
            SetRoundedCorners(panelStat3, 10);

            // Thêm border màu cho các stat panels
            panelStat1.Paint += (s, e) => DrawLeftBorder(e.Graphics, panelStat1, Color.FromArgb(52, 152, 219), 4);
            panelStat2.Paint += (s, e) => DrawLeftBorder(e.Graphics, panelStat2, Color.FromArgb(241, 196, 15), 4);
            panelStat3.Paint += (s, e) => DrawLeftBorder(e.Graphics, panelStat3, Color.FromArgb(46, 204, 113), 4);

            // Tạo FlowLayoutPanel cho projects
            flowProjectsList = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill,
                FlowDirection = FlowDirection.TopDown,
                WrapContents = false,
                AutoScroll = true,
                Padding = new Padding(10)
            };
            panelProjectsList.Controls.Add(flowProjectsList);
        }

        private async void LoadProjectsFromApi()
        {
            if (string.IsNullOrEmpty(currentUserId))
            {
                // Load sample data if no userId
                LoadSampleProjects();
                return;
            }

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    // GET projects by OwnerUserID
                    var response = await client.GetAsync($"http://localhost:5000/api/projects?OwnerUserID={currentUserId}");
                    var responseContent = await response.Content.ReadAsStringAsync();

                    if (response.IsSuccessStatusCode)
                    {
                        var result = JsonSerializer.Deserialize<ProjectsApiResponse>(responseContent, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });

                        // Debug: Show raw JSON
                        System.Diagnostics.Debug.WriteLine($"Raw JSON Response: {responseContent}");

                        // Clear existing projects
                        flowProjectsList.Controls.Clear();

                        // Add projects from API
                        if (result?.Data != null && result.Data.Count > 0)
                        {
                            foreach (var project in result.Data)
                            {
                                // Debug: Check project data
                                System.Diagnostics.Debug.WriteLine($"Loading project: {project.ProjectName}");
                                System.Diagnostics.Debug.WriteLine($"Project ID (_id): {project._id ?? "NULL"}");
                                System.Diagnostics.Debug.WriteLine($"Project ID (id): {project.id ?? "NULL"}");
                                System.Diagnostics.Debug.WriteLine($"Project ID (helper): {project.ProjectId ?? "NULL"}");
                                System.Diagnostics.Debug.WriteLine($"Status: {project.Status}");
                                
                                // TEMPORARY: Show MessageBox to see the ID
                                if (string.IsNullOrEmpty(project.ProjectId))
                                {
                                    MessageBox.Show($"WARNING: Project '{project.ProjectName}' has NULL ProjectId!\n_id: {project._id}\nid: {project.id}", 
                                        "Debug", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                }
                                
                                // Parse date
                                DateTime endDate;
                                DateTime.TryParse(project.EndDate, out endDate);

                                // Calculate progress (you can get this from API or calculate based on tasks)
                                int progress = CalculateProgress(project.Status);

                                AddProjectItem(
                                    project.ProjectName,
                                    endDate.ToString("dd/MM/yyyy"),
                                    progress,
                                    project.Status,
                                    new[] { GetInitials(currentUserName) },
                                    project.ProjectId  // Use ProjectId helper property
                                );
                            }

                            UpdateStatistics();
                        }
                        else
                        {
                            // No projects found - show empty state
                            ShowEmptyState();
                        }
                    }
                    else
                    {
                        MessageBox.Show($"Không thể tải danh sách dự án.\nMã lỗi: {response.StatusCode}", 
                            "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        LoadSampleProjects(); // Fallback to sample data
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                MessageBox.Show($"Không thể kết nối đến server.\nChi tiết: {ex.Message}", 
                    "Lỗi kết nối", MessageBoxButtons.OK, MessageBoxIcon.Error);
                LoadSampleProjects(); // Fallback to sample data
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi tải dự án: {ex.Message}", 
                    "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                LoadSampleProjects(); // Fallback to sample data
            }
        }

        private int CalculateProgress(string status)
        {
            return status switch
            {
                "Planning" => 10,
                "In Progress" => 50,
                "On Hold" => 30,
                "Completed" => 100,
                "Cancelled" => 0,
                _ => 0
            };
        }

        private void ShowEmptyState()
        {
            var emptyLabel = new Label
            {
                Text = "Chưa có dự án nào.\nNhấn nút '+ Dự Án Mới' để tạo dự án đầu tiên!",
                Font = new Font("Segoe UI", 12F, FontStyle.Italic),
                ForeColor = Color.Gray,
                AutoSize = false,
                Size = new Size(flowProjectsList.Width - 40, 100),
                TextAlign = ContentAlignment.MiddleCenter,
                Dock = DockStyle.Fill
            };
            flowProjectsList.Controls.Add(emptyLabel);
        }

        private string GetInitials(string name)
        {
            var parts = name.Split(' ');
            if (parts.Length >= 2)
                return $"{parts[0][0]}{parts[parts.Length - 1][0]}".ToUpper();
            return name.Length >= 2 ? name.Substring(0, 2).ToUpper() : name.ToUpper();
        }

        private void SetRoundedCorners(Panel panel, int radius)
        {
            panel.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(panel.ClientRectangle, radius))
                {
                    panel.Region = new Region(path);
                }
            };
        }

        private System.Drawing.Drawing2D.GraphicsPath GetRoundedRectPath(Rectangle rect, int radius)
        {
            var path = new System.Drawing.Drawing2D.GraphicsPath();
            float r = radius;
            path.AddArc(rect.X, rect.Y, r, r, 180, 90);
            path.AddArc(rect.Right - r, rect.Y, r, r, 270, 90);
            path.AddArc(rect.Right - r, rect.Bottom - r, r, r, 0, 90);
            path.AddArc(rect.X, rect.Bottom - r, r, r, 90, 90);
            path.CloseFigure();
            return path;
        }

        private void DrawLeftBorder(Graphics g, Panel panel, Color color, int width)
        {
            using (var pen = new Pen(color, width))
            {
                g.DrawLine(pen, 0, 0, 0, panel.Height);
            }
        }

        private void LoadSampleProjects()
        {
            // Sample project 1
            AddProjectItem("Phát triển TaskScheduler Backend", "30/11/2025", 60, "In Progress",
                new[] { "ML", "A" });

            // Sample project 2
            AddProjectItem("Thiết kế UI/UX cho ứng dụng", "15/10/2025", 100, "Completed",
                new[] { "ML", "B" });

            // Sample project 3
            AddProjectItem("Marketing và giới thiệu sản phẩm", "31/01/2026", 10, "Planning",
                new[] { "A", "B" });
        }

        private void AddProjectItem(string title, string deadline, int progress, string status, string[] members)
        {
            // Store projectId (you'll need to pass this as parameter)
            AddProjectItem(title, deadline, progress, status, members, null);
        }

        private void AddProjectItem(string title, string deadline, int progress, string status, string[] members, string projectId)
        {
            var projectPanel = new Panel
            {
                Width = flowProjectsList.Width - 40,
                Height = 80,
                BackColor = Color.White,
                Margin = new Padding(5, 5, 5, 10),
                Padding = new Padding(15, 10, 15, 10),
                Tag = projectId // Store projectId in Tag for later use
            };

            // Title
            var lblTitle = new Label
            {
                Text = title,
                Font = new Font("Segoe UI", 11F, FontStyle.Bold),
                ForeColor = Color.FromArgb(88, 86, 214),
                AutoSize = true,
                Location = new Point(15, 10),
                Cursor = Cursors.Hand
            };
            lblTitle.Click += (s, e) => MessageBox.Show($"Clicked on: {title}");

            // Deadline
            var lblDeadline = new Label
            {
                Text = $"Kết thúc: {deadline}",
                Font = new Font("Segoe UI", 9F),
                ForeColor = Color.Gray,
                AutoSize = true,
                Location = new Point(15, 40)
            };

            // Progress bar
            var progressBar = new ProgressBar
            {
                Location = new Point(450, 25),
                Size = new Size(200, 20),
                Value = progress,
                Style = ProgressBarStyle.Continuous
            };

            // Progress label
            var lblProgress = new Label
            {
                Text = $"{progress}%",
                Font = new Font("Segoe UI", 9F, FontStyle.Bold),
                AutoSize = true,
                Location = new Point(660, 25)
            };

            // Member avatars
            int xPos = 750;
            foreach (var member in members)
            {
                var lblMember = new Label
                {
                    Text = member,
                    Font = new Font("Segoe UI", 9F, FontStyle.Bold),
                    Size = new Size(35, 35),
                    Location = new Point(xPos, 20),
                    BackColor = Color.FromArgb(88, 86, 214),
                    ForeColor = Color.White,
                    TextAlign = ContentAlignment.MiddleCenter
                };

                lblMember.Paint += (s, e) =>
                {
                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                    using (var path = GetRoundedRectPath(lblMember.ClientRectangle, 17))
                    {
                        lblMember.Region = new Region(path);
                    }
                };

                projectPanel.Controls.Add(lblMember);
                xPos += 40;
            }

            // Status label
            var lblStatus = new Label
            {
                Text = status,
                Font = new Font("Segoe UI", 9F, FontStyle.Bold),
                AutoSize = true,
                Location = new Point(projectPanel.Width - 170, 25),
                Padding = new Padding(10, 5, 10, 5),
                BackColor = GetStatusColor(status),
                ForeColor = Color.White
            };

            // Làm tròn góc cho status label
            lblStatus.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(lblStatus.ClientRectangle, 5))
                {
                    lblStatus.Region = new Region(path);
                }
            };

            // Delete button (only show if projectId is available)
            if (!string.IsNullOrEmpty(projectId))
            {
                var btnDelete = new Button
                {
                    Text = "🗑️",
                    Font = new Font("Segoe UI", 12F, FontStyle.Bold),
                    Size = new Size(35, 35),
                    Location = new Point(projectPanel.Width - 50, 22),
                    BackColor = Color.FromArgb(231, 76, 60),
                    ForeColor = Color.White,
                    FlatStyle = FlatStyle.Flat,
                    Cursor = Cursors.Hand,
                    Tag = projectId
                };

                btnDelete.FlatAppearance.BorderSize = 0;
                
                // Tooltip
                var tooltip = new ToolTip();
                tooltip.SetToolTip(btnDelete, "Xóa dự án");

                // Delete button click event
                btnDelete.Click += async (s, e) =>
                {
                    var result = MessageBox.Show(
                        $"Bạn có chắc chắn muốn xóa dự án '{title}'?\nProject ID: {projectId}",
                        "Xác nhận xóa",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Warning
                    );

                    if (result == DialogResult.Yes)
                    {
                        await DeleteProject(projectId, projectPanel);
                    }
                };

                // Rounded corners for delete button
                btnDelete.Paint += (s, e) =>
                {
                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                    using (var path = GetRoundedRectPath(btnDelete.ClientRectangle, 17))
                    {
                        btnDelete.Region = new Region(path);
                    }
                };

                projectPanel.Controls.Add(btnDelete);
            }
            else
            {
                // Debug: Show message if projectId is null
                System.Diagnostics.Debug.WriteLine($"No delete button for project: {title} - ProjectId: {projectId ?? "NULL"}");
            }

            projectPanel.Controls.AddRange(new Control[] { lblTitle, lblDeadline, progressBar, lblProgress, lblStatus });

            // Làm tròn góc cho project panel
            projectPanel.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(projectPanel.ClientRectangle, 8))
                {
                    projectPanel.Region = new Region(path);
                }
            };

            flowProjectsList.Controls.Add(projectPanel);
        }

        private async Task DeleteProject(string projectId, Panel projectPanel)
        {
            try
            {
                // Disable the panel while deleting
                projectPanel.Enabled = false;

                using (HttpClient client = new HttpClient())
                {
                    // DELETE request to API
                    var response = await client.DeleteAsync($"http://localhost:5000/api/projects/{projectId}");
                    var responseContent = await response.Content.ReadAsStringAsync();

                    if (response.IsSuccessStatusCode)
                    {
                        // Remove from UI
                        flowProjectsList.Controls.Remove(projectPanel);
                        projectPanel.Dispose();

                        // Update statistics
                        UpdateStatistics();

                        // Check if empty
                        if (flowProjectsList.Controls.Count == 0)
                        {
                            ShowEmptyState();
                        }

                        MessageBox.Show("Xóa dự án thành công!", "Thành công",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        var errorResult = JsonSerializer.Deserialize<ProjectsApiResponse>(responseContent, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });

                        MessageBox.Show($"Xóa dự án thất bại!\n{errorResult?.Message ?? responseContent}",
                            "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);

                        // Re-enable panel if delete failed
                        projectPanel.Enabled = true;
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                MessageBox.Show($"Không thể kết nối đến server.\nChi tiết: {ex.Message}",
                    "Lỗi kết nối", MessageBoxButtons.OK, MessageBoxIcon.Error);
                projectPanel.Enabled = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi xóa dự án: {ex.Message}",
                    "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                projectPanel.Enabled = true;
            }
        }

        private Color GetStatusColor(string status)
        {
            return status switch
            {
                "To Do" => Color.FromArgb(231, 76, 60),
                "Planning" => Color.FromArgb(155, 89, 182), // Purple
                "In Progress" => Color.FromArgb(241, 196, 15),
                "On Hold" => Color.FromArgb(243, 156, 18), // Orange
                "Completed" => Color.FromArgb(46, 204, 113),
                "Cancelled" => Color.FromArgb(149, 165, 166), // Gray
                _ => Color.Gray
            };
        }

        private void btnAddProject_Click(object sender, EventArgs e)
        {
            // Check if userId is available
            if (string.IsNullOrEmpty(currentUserId))
            {
                MessageBox.Show("Không tìm thấy thông tin người dùng. Vui lòng đăng nhập lại.", 
                    "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            using (var addProjectForm = new AddProject(currentUserId))
            {
                if (addProjectForm.ShowDialog() == DialogResult.OK && addProjectForm.IsSuccess)
                {
                    // Reload projects from API after adding new project
                    LoadProjectsFromApi();
                }
            }
        }

        private void UpdateStatistics()
        {
            // Count projects by status
            int totalProjects = flowProjectsList.Controls.Count;
            int planningCount = 0;
            int inProgressCount = 0;
            int completedCount = 0;
            int onHoldCount = 0;
            int cancelledCount = 0;

            // In a real implementation, you would track this from the API data
            // For now, we'll just show total count
            lblStat1Value.Text = totalProjects.ToString();
            lblStat2Value.Text = inProgressCount.ToString();
            lblStat3Value.Text = completedCount.ToString();
        }
    }

    // API Response classes for projects list
    public class ProjectsApiResponse
    {
        public string Message { get; set; }
        public List<ProjectData> Data { get; set; }
    }

    public class ProjectData
    {
        // Support both _id (MongoDB) and id (standard)
        private string _projectId;
        
        [System.Text.Json.Serialization.JsonPropertyName("_id")]
        public string _id 
        { 
            get => _projectId; 
            set => _projectId = value; 
        }
        
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string id 
        { 
            get => _projectId; 
            set => _projectId = value; 
        }
        
        public string ProjectName { get; set; }
        public string ProjectDescription { get; set; }
        public string StartDate { get; set; }
        public string EndDate { get; set; }
        public string Status { get; set; }
        public string OwnerUserID { get; set; }
        
        // Helper property to get ID regardless of field name
        [System.Text.Json.Serialization.JsonIgnore]
        public string ProjectId => _projectId;
    }
}
