using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace MyProject
{
    public partial class ProjectView : Form
    {
        private string projectId;
        private string currentUserId;
        private string currentUserName;
        
        // Sample task data class
        public class TaskItem
        {
            public string TaskId { get; set; }
            public string TaskName { get; set; }
            public string Description { get; set; }
            public DateTime DueDate { get; set; }
            public string Priority { get; set; }
            public string Status { get; set; }
            public string AssignedUser { get; set; }
            public string ProjectId { get; set; }
        }

        public ProjectView(string projectId, string projectName, string projectDescription, 
                          string endDate, string status, string userId, string userName)
        {
            InitializeComponent();
            
            this.projectId = projectId;
            this.currentUserId = userId;
            this.currentUserName = userName;
            
            // Set project info
            lblProjectName.Text = projectName;
            lblProjectDescription.Text = projectDescription;
            lblProjectDeadline.Text = $"Ngày kết thúc dự kiến: {endDate}";
            cboProjectStatus.SelectedItem = status;
            
            // Set user info
            lblUserName.Text = $"Chào mừng, {userName}";
            lblUserAvatar.Text = GetInitials(userName);
            
            // Style components
            InitializeStyles();
            
            // Load tasks
            LoadTasks();
        }

        private void InitializeStyles()
        {
            // Round corners for user avatar
            lblUserAvatar.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(lblUserAvatar.ClientRectangle, 25))
                {
                    lblUserAvatar.Region = new Region(path);
                }
            };

            // Round corners for project info panel
            panelProjectInfo.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(panelProjectInfo.ClientRectangle, 8))
                {
                    panelProjectInfo.Region = new Region(path);
                }
            };

            // Round corners for add task button
            btnAddTask.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(btnAddTask.ClientRectangle, 5))
                {
                    btnAddTask.Region = new Region(path);
                }
            };

            // Round corners for task panels
            panelToDo.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(panelToDo.ClientRectangle, 8))
                {
                    panelToDo.Region = new Region(path);
                }
            };

            panelInProgress.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(panelInProgress.ClientRectangle, 8))
                {
                    panelInProgress.Region = new Region(path);
                }
            };

            panelDone.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(panelDone.ClientRectangle, 8))
                {
                    panelDone.Region = new Region(path);
                }
            };

            // Style status dropdown
            cboProjectStatus.BackColor = GetStatusBackgroundColor(cboProjectStatus.Text);
            cboProjectStatus.ForeColor = Color.White;
        }

        private System.Drawing.Drawing2D.GraphicsPath GetRoundedRectPath(Rectangle rect, int radius)
        {
            var path = new System.Drawing.Drawing2D.GraphicsPath();
            float r = radius;
            path.AddArc(rect.X, rect.Y, r, r, 180, 90);
            path.AddArc(rect.Right - r, rect.Y, r, r, 270, 90);
            path.AddArc(rect.Right - r, rect.Bottom - r, r, r, 0, 90);
            path.AddArc(rect.X, rect.Bottom - r, r, r, 90, 90);
            path.CloseFigure();
            return path;
        }

        private string GetInitials(string name)
        {
            var parts = name.Split(' ');
            if (parts.Length >= 2)
                return $"{parts[0][0]}{parts[parts.Length - 1][0]}".ToUpper();
            return name.Length >= 2 ? name.Substring(0, 2).ToUpper() : name.ToUpper();
        }

        private Color GetStatusBackgroundColor(string status)
        {
            return status switch
            {
                "Planning" => Color.FromArgb(155, 89, 182),
                "To Do" => Color.FromArgb(231, 76, 60),
                "In Progress" => Color.FromArgb(241, 196, 15),
                "On Hold" => Color.FromArgb(243, 156, 18),
                "Completed" => Color.FromArgb(46, 204, 113),
                "Cancelled" => Color.FromArgb(149, 165, 166),
                _ => Color.Gray
            };
        }

        private Color GetPriorityColor(string priority)
        {
            return priority switch
            {
                "High" => Color.FromArgb(231, 76, 60),
                "Medium" => Color.FromArgb(241, 196, 15),
                "Low" => Color.FromArgb(46, 204, 113),
                _ => Color.Gray
            };
        }

        private void LoadTasks()
        {
            // Clear existing tasks
            flowToDoTasks.Controls.Clear();
            flowInProgressTasks.Controls.Clear();
            flowDoneTasks.Controls.Clear();

            // Sample tasks - replace with API call
            var sampleTasks = new List<TaskItem>
            {
                new TaskItem
                {
                    TaskId = "T1",
                    TaskName = "Thiết lập Express Server",
                    Description = "Cấu hình Express.js và middleware",
                    DueDate = DateTime.Parse("2025-10-20"),
                    Priority = "High",
                    Status = "Done",
                    AssignedUser = currentUserName,
                    ProjectId = projectId
                },
                new TaskItem
                {
                    TaskId = "T2",
                    TaskName = "Thiết kế Database Schema",
                    Description = "Tạo schema cho User và Project",
                    DueDate = DateTime.Parse("2025-10-25"),
                    Priority = "Medium",
                    Status = "In Progress",
                    AssignedUser = currentUserName,
                    ProjectId = projectId
                }
            };

            // Add tasks to appropriate columns
            foreach (var task in sampleTasks)
            {
                var taskCard = CreateTaskCard(task);
                
                switch (task.Status)
                {
                    case "To Do":
                        flowToDoTasks.Controls.Add(taskCard);
                        break;
                    case "In Progress":
                        flowInProgressTasks.Controls.Add(taskCard);
                        break;
                    case "Done":
                        flowDoneTasks.Controls.Add(taskCard);
                        break;
                }
            }
        }

        private Panel CreateTaskCard(TaskItem task)
        {
            var card = new Panel
            {
                Width = 310,
                Height = 110,
                BackColor = Color.White,
                Margin = new Padding(5),
                Padding = new Padding(10),
                Cursor = Cursors.Hand
            };

            // Task name
            var lblTaskName = new Label
            {
                Text = task.TaskName,
                Font = new Font("Segoe UI", 10F, FontStyle.Bold),
                ForeColor = Color.FromArgb(44, 62, 80),
                Location = new Point(10, 10),
                Size = new Size(240, 40),
                AutoSize = false
            };

            // Due date
            var lblDueDate = new Label
            {
                Text = $"Hạn: {task.DueDate:dd/MM/yyyy}",
                Font = new Font("Segoe UI", 8F),
                ForeColor = Color.Gray,
                Location = new Point(10, 55),
                AutoSize = true
            };

            // Priority badge
            var lblPriority = new Label
            {
                Text = task.Priority,
                Font = new Font("Segoe UI", 8F, FontStyle.Bold),
                ForeColor = Color.White,
                BackColor = GetPriorityColor(task.Priority),
                Location = new Point(250, 10),
                Size = new Size(50, 20),
                TextAlign = ContentAlignment.MiddleCenter
            };

            // Round priority badge
            lblPriority.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(lblPriority.ClientRectangle, 3))
                {
                    lblPriority.Region = new Region(path);
                }
            };

            // User initials
            var lblUserInitials = new Label
            {
                Text = GetInitials(task.AssignedUser),
                Font = new Font("Segoe UI", 9F, FontStyle.Bold),
                ForeColor = Color.White,
                BackColor = Color.FromArgb(88, 86, 214),
                Location = new Point(260, 75),
                Size = new Size(30, 30),
                TextAlign = ContentAlignment.MiddleCenter
            };

            // Round user initials
            lblUserInitials.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(lblUserInitials.ClientRectangle, 15))
                {
                    lblUserInitials.Region = new Region(path);
                }
            };

            // Round card
            card.Paint += (s, e) =>
            {
                e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                using (var path = GetRoundedRectPath(card.ClientRectangle, 8))
                {
                    card.Region = new Region(path);
                }

                // Add shadow effect
                var shadowRect = new Rectangle(2, 2, card.Width - 2, card.Height - 2);
                using (var shadowBrush = new System.Drawing.Drawing2D.LinearGradientBrush(
                    shadowRect, 
                    Color.FromArgb(20, 0, 0, 0), 
                    Color.FromArgb(5, 0, 0, 0), 
                    45f))
                {
                    e.Graphics.FillRectangle(shadowBrush, shadowRect);
                }
            };

            card.Controls.AddRange(new Control[] { lblTaskName, lblDueDate, lblPriority, lblUserInitials });

            // Click event to view task details
            card.Click += (s, e) => MessageBox.Show($"Task: {task.TaskName}\n{task.Description}", 
                "Chi Tiết Nhiệm Vụ", MessageBoxButtons.OK, MessageBoxIcon.Information);

            return card;
        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnAddTask_Click(object sender, EventArgs e)
        {
            // Open Add Task form (to be implemented)
            MessageBox.Show($"Mở form thêm nhiệm vụ cho dự án: {lblProjectName.Text}\nProject ID: {projectId}", 
                "Thêm Nhiệm Vụ", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void cboProjectStatus_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cboProjectStatus.SelectedItem != null)
            {
                string newStatus = cboProjectStatus.SelectedItem.ToString();
                
                // Update status color
                cboProjectStatus.BackColor = GetStatusBackgroundColor(newStatus);
                
                // TODO: Call API to update project status
                MessageBox.Show($"Cập nhật trạng thái dự án thành: {newStatus}\nProject ID: {projectId}", 
                    "Cập Nhật Trạng Thái", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}
